(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@theo4u/ng-alert', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (factory((global.theo4u = global.theo4u || {}, global.theo4u['ng-alert'] = {}),global.ng.core,global.rxjs,global.ng.common));
}(this, (function (exports,i0,rxjs,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var MessageType = {
        success: 'success',
        error: 'error',
        info: 'info',
        warning: 'warning',
    };
    /** @enum {number} */
    var CloseType = {
        TIMES: 0, NORMAL: 1,
    };
    CloseType[CloseType.TIMES] = 'TIMES';
    CloseType[CloseType.NORMAL] = 'NORMAL';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAlertService = /** @class */ (function () {
        function NgAlertService() {
            this._messageSource = new rxjs.Subject();
        }
        /**
         * this returns our alert message source
         */
        /**
         * this returns our alert message source
         * @return {?}
         */
        NgAlertService.prototype.getSource = /**
         * this returns our alert message source
         * @return {?}
         */
            function () {
                return this._messageSource;
            };
        /**
         * push our message to our alert
         * @param message type IMessage to be pushed to our listeners/subscribers
         */
        /**
         * push our message to our alert
         * @param {?} message type IMessage to be pushed to our listeners/subscribers
         * @return {?}
         */
        NgAlertService.prototype.push = /**
         * push our message to our alert
         * @param {?} message type IMessage to be pushed to our listeners/subscribers
         * @return {?}
         */
            function (message) {
                this._messageSource.next(message);
            };
        NgAlertService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgAlertService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgAlertService.ngInjectableDef = i0.defineInjectable({ factory: function NgAlertService_Factory() { return new NgAlertService(); }, token: NgAlertService, providedIn: "root" });
        return NgAlertService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAlertComponent = /** @class */ (function () {
        function NgAlertComponent() {
            this.messageChange = new i0.EventEmitter();
            this.closeType = CloseType.TIMES;
            this.closeTypes = CloseType;
        }
        Object.defineProperty(NgAlertComponent.prototype, "message", {
            get: /**
             * @return {?}
             */ function () {
                return this.rawMessage;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.rawMessage = value;
                this.messageChange.emit(this.rawMessage);
            },
            enumerable: true,
            configurable: true
        });
        NgAlertComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ng-alert',
                        template: "<div *ngIf=\"message\" class=\"alert alert-{{message.type}}\" [ngClass]=\"{padding:closeType===closeTypes.TIMES}\">\n  <h5 *ngIf=\"message.title\">{{message.title}}</h5>\n  <span [innerHTML]=\"message.message\">\n  </span>\n\n  <button *ngFor=\"let button of message.buttons\" class=\"{{button.css}}\" (click)=\"button.action?button.action():true\">\n    {{button.label}}\n  </button>\n\n  <button (click)=\"message=null\" *ngIf=\"dismissable && closeType===closeTypes.TIMES\" type=\"button\" class=\"close\" data-dismiss=\"alert\"\n                                                                                                                 aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <p align=\"center\" *ngIf=\"dismissable && closeType===closeTypes.NORMAL\">\n  <a (click)=\"message=null\">close</a>\n  </p>\n\n</div>\n"
                    }] }
        ];
        NgAlertComponent.propDecorators = {
            dismissable: [{ type: i0.Input }],
            messageChange: [{ type: i0.Output }],
            closeType: [{ type: i0.Input }],
            message: [{ type: i0.Input }]
        };
        return NgAlertComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgAlertModule = /** @class */ (function () {
        function NgAlertModule() {
        }
        NgAlertModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [NgAlertComponent],
                        exports: [NgAlertComponent]
                    },] }
        ];
        return NgAlertModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.MessageType = MessageType;
    exports.CloseType = CloseType;
    exports.NgAlertService = NgAlertService;
    exports.NgAlertComponent = NgAlertComponent;
    exports.NgAlertModule = NgAlertModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbzR1LW5nLWFsZXJ0LnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQHRoZW80dS9uZy1hbGVydC9saWIvaW50ZXJmYWNlcy50cyIsIm5nOi8vQHRoZW80dS9uZy1hbGVydC9saWIvYWxlcnQuc2VydmljZS50cyIsIm5nOi8vQHRoZW80dS9uZy1hbGVydC9saWIvYWxlcnQuY29tcG9uZW50LnRzIiwibmc6Ly9AdGhlbzR1L25nLWFsZXJ0L2xpYi9hbGVydC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gTWVzc2FnZVR5cGUge1xuICBzdWNjZXNzID0gJ3N1Y2Nlc3MnLFxuICAgIGVycm9yID0gJ2Vycm9yJyxcbiAgICBpbmZvID0gJ2luZm8nLFxuICAgIHdhcm5pbmcgPSAnd2FybmluZydcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWVzc2FnZSB7XG4gIHR5cGU6IE1lc3NhZ2VUeXBlO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBidXR0b25zPzogQXJyYXk8e1xuICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgYWN0aW9uPzogRnVuY3Rpb24sXG4gICAgY3NzPzogc3RyaW5nXG4gIH0+O1xufVxuXG5leHBvcnQgZW51bSBDbG9zZVR5cGUge1xuICBUSU1FUywgTk9STUFMXG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJTWVzc2FnZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nQWxlcnRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfbWVzc2FnZVNvdXJjZSA9IG5ldyBTdWJqZWN0PElNZXNzYWdlPigpO1xuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIC8qKlxuICAgKiB0aGlzIHJldHVybnMgb3VyIGFsZXJ0IG1lc3NhZ2Ugc291cmNlXG4gICAqL1xuICBnZXRTb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VTb3VyY2U7XG4gIH1cblxuICAvKipcbiAgICogcHVzaCBvdXIgbWVzc2FnZSB0byBvdXIgYWxlcnRcbiAgICogQHBhcmFtIG1lc3NhZ2UgdHlwZSBJTWVzc2FnZSB0byBiZSBwdXNoZWQgdG8gb3VyIGxpc3RlbmVycy9zdWJzY3JpYmVyc1xuICAgKi9cbiAgcHVzaChtZXNzYWdlOiBJTWVzc2FnZSkge1xuICAgIHRoaXMuX21lc3NhZ2VTb3VyY2UubmV4dChtZXNzYWdlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNZXNzYWdlLCBDbG9zZVR5cGUgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZy1hbGVydCcsXG4gIHRlbXBsYXRlVXJsOiAnYWxlcnQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWxlcnRDb21wb25lbnQge1xuXG4gIEBJbnB1dCgpIGRpc21pc3NhYmxlOiBib29sZWFuO1xuICByYXdNZXNzYWdlOiBJTWVzc2FnZTtcbiAgQE91dHB1dCgpIG1lc3NhZ2VDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpIGNsb3NlVHlwZTogQ2xvc2VUeXBlID0gQ2xvc2VUeXBlLlRJTUVTO1xuICBjbG9zZVR5cGVzID0gQ2xvc2VUeXBlO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBtZXNzYWdlKCk6IElNZXNzYWdlIHtcbiAgICByZXR1cm4gdGhpcy5yYXdNZXNzYWdlO1xuICB9XG5cbiAgc2V0IG1lc3NhZ2UodmFsdWU6IElNZXNzYWdlKSB7XG4gICAgdGhpcy5yYXdNZXNzYWdlID0gdmFsdWU7XG4gICAgdGhpcy5tZXNzYWdlQ2hhbmdlLmVtaXQodGhpcy5yYXdNZXNzYWdlKTtcbiAgfVxuXG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nQWxlcnRDb21wb25lbnQgfSBmcm9tICcuL2FsZXJ0LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbTmdBbGVydENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtOZ0FsZXJ0Q29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBOZ0FsZXJ0TW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIlN1YmplY3QiLCJJbmplY3RhYmxlIiwiRXZlbnRFbWl0dGVyIiwiQ29tcG9uZW50IiwiSW5wdXQiLCJPdXRwdXQiLCJOZ01vZHVsZSIsIkNvbW1vbk1vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O1FBQ0UsU0FBVSxTQUFTO1FBQ2pCLE9BQVEsT0FBTztRQUNmLE1BQU8sTUFBTTtRQUNiLFNBQVUsU0FBUzs7OztRQWVyQixRQUFLLEVBQUUsU0FBTTs7d0JBQWIsS0FBSzt3QkFBRSxNQUFNOzs7Ozs7QUNuQmY7UUFTRTtrQ0FEeUIsSUFBSUEsWUFBTyxFQUFZO1NBQy9COzs7Ozs7OztRQUtqQixrQ0FBUzs7OztZQUFUO2dCQUNFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQzthQUM1Qjs7Ozs7Ozs7OztRQU1ELDZCQUFJOzs7OztZQUFKLFVBQUssT0FBaUI7Z0JBQ3BCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ25DOztvQkFwQkZDLGFBQVUsU0FBQzt3QkFDVixVQUFVLEVBQUUsTUFBTTtxQkFDbkI7Ozs7OzZCQU5EOzs7Ozs7O0FDQUE7O2lDQVk0QixJQUFJQyxlQUFZLEVBQUU7NkJBQ1osU0FBUyxDQUFDLEtBQUs7OEJBQ2xDLFNBQVM7O1FBRXRCLHNCQUNJLHFDQUFPOzs7Z0JBRFg7Z0JBRUUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO2FBQ3hCOzs7O2dCQUVELFVBQVksS0FBZTtnQkFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUMxQzs7O1dBTEE7O29CQWhCRkMsWUFBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxVQUFVO3dCQUNwQiwrMkJBQW1DO3FCQUVwQzs7O2tDQUdFQyxRQUFLO29DQUVMQyxTQUFNO2dDQUNORCxRQUFLOzhCQUdMQSxRQUFLOzsrQkFoQlI7Ozs7Ozs7QUNBQTs7OztvQkFJQ0UsV0FBUSxTQUFDO3dCQUNSLE9BQU8sRUFBRTs0QkFDUEMsbUJBQVk7eUJBQ2I7d0JBQ0QsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7d0JBQ2hDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO3FCQUM1Qjs7NEJBVkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==