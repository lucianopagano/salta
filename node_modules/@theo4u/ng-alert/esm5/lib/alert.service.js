/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
var NgAlertService = /** @class */ (function () {
    function NgAlertService() {
        this._messageSource = new Subject();
    }
    /**
     * this returns our alert message source
     */
    /**
     * this returns our alert message source
     * @return {?}
     */
    NgAlertService.prototype.getSource = /**
     * this returns our alert message source
     * @return {?}
     */
    function () {
        return this._messageSource;
    };
    /**
     * push our message to our alert
     * @param message type IMessage to be pushed to our listeners/subscribers
     */
    /**
     * push our message to our alert
     * @param {?} message type IMessage to be pushed to our listeners/subscribers
     * @return {?}
     */
    NgAlertService.prototype.push = /**
     * push our message to our alert
     * @param {?} message type IMessage to be pushed to our listeners/subscribers
     * @return {?}
     */
    function (message) {
        this._messageSource.next(message);
    };
    NgAlertService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgAlertService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgAlertService.ngInjectableDef = i0.defineInjectable({ factory: function NgAlertService_Factory() { return new NgAlertService(); }, token: NgAlertService, providedIn: "root" });
    return NgAlertService;
}());
export { NgAlertService };
if (false) {
    /** @type {?} */
    NgAlertService.prototype._messageSource;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aGVvNHUvbmctYWxlcnQvIiwic291cmNlcyI6WyJsaWIvYWxlcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7SUFRN0I7OEJBRHlCLElBQUksT0FBTyxFQUFZO0tBQy9CO0lBRWpCOztPQUVHOzs7OztJQUNILGtDQUFTOzs7O0lBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7S0FDNUI7SUFFRDs7O09BR0c7Ozs7OztJQUNILDZCQUFJOzs7OztJQUFKLFVBQUssT0FBaUI7UUFDcEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDbkM7O2dCQXBCRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozt5QkFORDs7U0FPYSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSU1lc3NhZ2UgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ0FsZXJ0U2VydmljZSB7XG4gIHByaXZhdGUgX21lc3NhZ2VTb3VyY2UgPSBuZXcgU3ViamVjdDxJTWVzc2FnZT4oKTtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvKipcbiAgICogdGhpcyByZXR1cm5zIG91ciBhbGVydCBtZXNzYWdlIHNvdXJjZVxuICAgKi9cbiAgZ2V0U291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlU291cmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIHB1c2ggb3VyIG1lc3NhZ2UgdG8gb3VyIGFsZXJ0XG4gICAqIEBwYXJhbSBtZXNzYWdlIHR5cGUgSU1lc3NhZ2UgdG8gYmUgcHVzaGVkIHRvIG91ciBsaXN0ZW5lcnMvc3Vic2NyaWJlcnNcbiAgICovXG4gIHB1c2gobWVzc2FnZTogSU1lc3NhZ2UpIHtcbiAgICB0aGlzLl9tZXNzYWdlU291cmNlLm5leHQobWVzc2FnZSk7XG4gIH1cbn1cbiJdfQ==