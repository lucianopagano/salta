import { Injectable, Component, Input, Output, EventEmitter, NgModule, defineInjectable } from '@angular/core';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {string} */
const MessageType = {
    success: 'success',
    error: 'error',
    info: 'info',
    warning: 'warning',
};
/** @enum {number} */
const CloseType = {
    TIMES: 0, NORMAL: 1,
};
CloseType[CloseType.TIMES] = 'TIMES';
CloseType[CloseType.NORMAL] = 'NORMAL';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgAlertService {
    constructor() {
        this._messageSource = new Subject();
    }
    /**
     * this returns our alert message source
     * @return {?}
     */
    getSource() {
        return this._messageSource;
    }
    /**
     * push our message to our alert
     * @param {?} message type IMessage to be pushed to our listeners/subscribers
     * @return {?}
     */
    push(message) {
        this._messageSource.next(message);
    }
}
NgAlertService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgAlertService.ctorParameters = () => [];
/** @nocollapse */ NgAlertService.ngInjectableDef = defineInjectable({ factory: function NgAlertService_Factory() { return new NgAlertService(); }, token: NgAlertService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgAlertComponent {
    constructor() {
        this.messageChange = new EventEmitter();
        this.closeType = CloseType.TIMES;
        this.closeTypes = CloseType;
    }
    /**
     * @return {?}
     */
    get message() {
        return this.rawMessage;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set message(value) {
        this.rawMessage = value;
        this.messageChange.emit(this.rawMessage);
    }
}
NgAlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-alert',
                template: "<div *ngIf=\"message\" class=\"alert alert-{{message.type}}\" [ngClass]=\"{padding:closeType===closeTypes.TIMES}\">\n  <h5 *ngIf=\"message.title\">{{message.title}}</h5>\n  <span [innerHTML]=\"message.message\">\n  </span>\n\n  <button *ngFor=\"let button of message.buttons\" class=\"{{button.css}}\" (click)=\"button.action?button.action():true\">\n    {{button.label}}\n  </button>\n\n  <button (click)=\"message=null\" *ngIf=\"dismissable && closeType===closeTypes.TIMES\" type=\"button\" class=\"close\" data-dismiss=\"alert\"\n                                                                                                                 aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <p align=\"center\" *ngIf=\"dismissable && closeType===closeTypes.NORMAL\">\n  <a (click)=\"message=null\">close</a>\n  </p>\n\n</div>\n"
            }] }
];
NgAlertComponent.propDecorators = {
    dismissable: [{ type: Input }],
    messageChange: [{ type: Output }],
    closeType: [{ type: Input }],
    message: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgAlertModule {
}
NgAlertModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [NgAlertComponent],
                exports: [NgAlertComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MessageType, CloseType, NgAlertService, NgAlertComponent, NgAlertModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbzR1LW5nLWFsZXJ0LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9AdGhlbzR1L25nLWFsZXJ0L2xpYi9pbnRlcmZhY2VzLnRzIiwibmc6Ly9AdGhlbzR1L25nLWFsZXJ0L2xpYi9hbGVydC5zZXJ2aWNlLnRzIiwibmc6Ly9AdGhlbzR1L25nLWFsZXJ0L2xpYi9hbGVydC5jb21wb25lbnQudHMiLCJuZzovL0B0aGVvNHUvbmctYWxlcnQvbGliL2FsZXJ0Lm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBNZXNzYWdlVHlwZSB7XG4gIHN1Y2Nlc3MgPSAnc3VjY2VzcycsXG4gICAgZXJyb3IgPSAnZXJyb3InLFxuICAgIGluZm8gPSAnaW5mbycsXG4gICAgd2FybmluZyA9ICd3YXJuaW5nJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlIHtcbiAgdHlwZTogTWVzc2FnZVR5cGU7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGJ1dHRvbnM/OiBBcnJheTx7XG4gICAgbGFiZWw6IHN0cmluZyxcbiAgICBhY3Rpb24/OiBGdW5jdGlvbixcbiAgICBjc3M/OiBzdHJpbmdcbiAgfT47XG59XG5cbmV4cG9ydCBlbnVtIENsb3NlVHlwZSB7XG4gIFRJTUVTLCBOT1JNQUxcbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElNZXNzYWdlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmdBbGVydFNlcnZpY2Uge1xuICBwcml2YXRlIF9tZXNzYWdlU291cmNlID0gbmV3IFN1YmplY3Q8SU1lc3NhZ2U+KCk7XG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgLyoqXG4gICAqIHRoaXMgcmV0dXJucyBvdXIgYWxlcnQgbWVzc2FnZSBzb3VyY2VcbiAgICovXG4gIGdldFNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZVNvdXJjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBwdXNoIG91ciBtZXNzYWdlIHRvIG91ciBhbGVydFxuICAgKiBAcGFyYW0gbWVzc2FnZSB0eXBlIElNZXNzYWdlIHRvIGJlIHB1c2hlZCB0byBvdXIgbGlzdGVuZXJzL3N1YnNjcmliZXJzXG4gICAqL1xuICBwdXNoKG1lc3NhZ2U6IElNZXNzYWdlKSB7XG4gICAgdGhpcy5fbWVzc2FnZVNvdXJjZS5uZXh0KG1lc3NhZ2UpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1lc3NhZ2UsIENsb3NlVHlwZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nLWFsZXJ0JyxcbiAgdGVtcGxhdGVVcmw6ICdhbGVydC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW11cbn0pXG5leHBvcnQgY2xhc3MgTmdBbGVydENvbXBvbmVudCB7XG5cbiAgQElucHV0KCkgZGlzbWlzc2FibGU6IGJvb2xlYW47XG4gIHJhd01lc3NhZ2U6IElNZXNzYWdlO1xuICBAT3V0cHV0KCkgbWVzc2FnZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQElucHV0KCkgY2xvc2VUeXBlOiBDbG9zZVR5cGUgPSBDbG9zZVR5cGUuVElNRVM7XG4gIGNsb3NlVHlwZXMgPSBDbG9zZVR5cGU7XG5cbiAgQElucHV0KClcbiAgZ2V0IG1lc3NhZ2UoKTogSU1lc3NhZ2Uge1xuICAgIHJldHVybiB0aGlzLnJhd01lc3NhZ2U7XG4gIH1cblxuICBzZXQgbWVzc2FnZSh2YWx1ZTogSU1lc3NhZ2UpIHtcbiAgICB0aGlzLnJhd01lc3NhZ2UgPSB2YWx1ZTtcbiAgICB0aGlzLm1lc3NhZ2VDaGFuZ2UuZW1pdCh0aGlzLnJhd01lc3NhZ2UpO1xuICB9XG5cblxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdBbGVydENvbXBvbmVudCB9IGZyb20gJy4vYWxlcnQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ0FsZXJ0Q29tcG9uZW50XSxcbiAgZXhwb3J0czogW05nQWxlcnRDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWxlcnRNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUNFLFNBQVUsU0FBUztJQUNqQixPQUFRLE9BQU87SUFDZixNQUFPLE1BQU07SUFDYixTQUFVLFNBQVM7Ozs7SUFlckIsUUFBSyxFQUFFLFNBQU07O29CQUFiLEtBQUs7b0JBQUUsTUFBTTs7Ozs7O0FDbkJmO0lBU0U7OEJBRHlCLElBQUksT0FBTyxFQUFZO0tBQy9COzs7OztJQUtqQixTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0tBQzVCOzs7Ozs7SUFNRCxJQUFJLENBQUMsT0FBaUI7UUFDcEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDbkM7OztZQXBCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7Ozs7Ozs7QUNORDs7NkJBWTRCLElBQUksWUFBWSxFQUFFO3lCQUNaLFNBQVMsQ0FBQyxLQUFLOzBCQUNsQyxTQUFTOzs7OztJQUV0QixJQUNJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7S0FDeEI7Ozs7O0lBRUQsSUFBSSxPQUFPLENBQUMsS0FBZTtRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDMUM7OztZQXJCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLCsyQkFBbUM7YUFFcEM7OzswQkFHRSxLQUFLOzRCQUVMLE1BQU07d0JBQ04sS0FBSztzQkFHTCxLQUFLOzs7Ozs7O0FDaEJSOzs7WUFJQyxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFlBQVk7aUJBQ2I7Z0JBQ0QsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ2hDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO2FBQzVCOzs7Ozs7Ozs7Ozs7Ozs7In0=