import { Injectable, Component, Input, Output, EventEmitter, NgModule, defineInjectable } from '@angular/core';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {string} */
var MessageType = {
    success: 'success',
    error: 'error',
    info: 'info',
    warning: 'warning',
};
/** @enum {number} */
var CloseType = {
    TIMES: 0, NORMAL: 1,
};
CloseType[CloseType.TIMES] = 'TIMES';
CloseType[CloseType.NORMAL] = 'NORMAL';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgAlertService = /** @class */ (function () {
    function NgAlertService() {
        this._messageSource = new Subject();
    }
    /**
     * this returns our alert message source
     */
    /**
     * this returns our alert message source
     * @return {?}
     */
    NgAlertService.prototype.getSource = /**
     * this returns our alert message source
     * @return {?}
     */
    function () {
        return this._messageSource;
    };
    /**
     * push our message to our alert
     * @param message type IMessage to be pushed to our listeners/subscribers
     */
    /**
     * push our message to our alert
     * @param {?} message type IMessage to be pushed to our listeners/subscribers
     * @return {?}
     */
    NgAlertService.prototype.push = /**
     * push our message to our alert
     * @param {?} message type IMessage to be pushed to our listeners/subscribers
     * @return {?}
     */
    function (message) {
        this._messageSource.next(message);
    };
    NgAlertService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgAlertService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgAlertService.ngInjectableDef = defineInjectable({ factory: function NgAlertService_Factory() { return new NgAlertService(); }, token: NgAlertService, providedIn: "root" });
    return NgAlertService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgAlertComponent = /** @class */ (function () {
    function NgAlertComponent() {
        this.messageChange = new EventEmitter();
        this.closeType = CloseType.TIMES;
        this.closeTypes = CloseType;
    }
    Object.defineProperty(NgAlertComponent.prototype, "message", {
        get: /**
         * @return {?}
         */
        function () {
            return this.rawMessage;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.rawMessage = value;
            this.messageChange.emit(this.rawMessage);
        },
        enumerable: true,
        configurable: true
    });
    NgAlertComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-alert',
                    template: "<div *ngIf=\"message\" class=\"alert alert-{{message.type}}\" [ngClass]=\"{padding:closeType===closeTypes.TIMES}\">\n  <h5 *ngIf=\"message.title\">{{message.title}}</h5>\n  <span [innerHTML]=\"message.message\">\n  </span>\n\n  <button *ngFor=\"let button of message.buttons\" class=\"{{button.css}}\" (click)=\"button.action?button.action():true\">\n    {{button.label}}\n  </button>\n\n  <button (click)=\"message=null\" *ngIf=\"dismissable && closeType===closeTypes.TIMES\" type=\"button\" class=\"close\" data-dismiss=\"alert\"\n                                                                                                                 aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <p align=\"center\" *ngIf=\"dismissable && closeType===closeTypes.NORMAL\">\n  <a (click)=\"message=null\">close</a>\n  </p>\n\n</div>\n"
                }] }
    ];
    NgAlertComponent.propDecorators = {
        dismissable: [{ type: Input }],
        messageChange: [{ type: Output }],
        closeType: [{ type: Input }],
        message: [{ type: Input }]
    };
    return NgAlertComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgAlertModule = /** @class */ (function () {
    function NgAlertModule() {
    }
    NgAlertModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [NgAlertComponent],
                    exports: [NgAlertComponent]
                },] }
    ];
    return NgAlertModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MessageType, CloseType, NgAlertService, NgAlertComponent, NgAlertModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbzR1LW5nLWFsZXJ0LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9AdGhlbzR1L25nLWFsZXJ0L2xpYi9pbnRlcmZhY2VzLnRzIiwibmc6Ly9AdGhlbzR1L25nLWFsZXJ0L2xpYi9hbGVydC5zZXJ2aWNlLnRzIiwibmc6Ly9AdGhlbzR1L25nLWFsZXJ0L2xpYi9hbGVydC5jb21wb25lbnQudHMiLCJuZzovL0B0aGVvNHUvbmctYWxlcnQvbGliL2FsZXJ0Lm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBNZXNzYWdlVHlwZSB7XG4gIHN1Y2Nlc3MgPSAnc3VjY2VzcycsXG4gICAgZXJyb3IgPSAnZXJyb3InLFxuICAgIGluZm8gPSAnaW5mbycsXG4gICAgd2FybmluZyA9ICd3YXJuaW5nJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlIHtcbiAgdHlwZTogTWVzc2FnZVR5cGU7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGJ1dHRvbnM/OiBBcnJheTx7XG4gICAgbGFiZWw6IHN0cmluZyxcbiAgICBhY3Rpb24/OiBGdW5jdGlvbixcbiAgICBjc3M/OiBzdHJpbmdcbiAgfT47XG59XG5cbmV4cG9ydCBlbnVtIENsb3NlVHlwZSB7XG4gIFRJTUVTLCBOT1JNQUxcbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElNZXNzYWdlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmdBbGVydFNlcnZpY2Uge1xuICBwcml2YXRlIF9tZXNzYWdlU291cmNlID0gbmV3IFN1YmplY3Q8SU1lc3NhZ2U+KCk7XG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgLyoqXG4gICAqIHRoaXMgcmV0dXJucyBvdXIgYWxlcnQgbWVzc2FnZSBzb3VyY2VcbiAgICovXG4gIGdldFNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZVNvdXJjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBwdXNoIG91ciBtZXNzYWdlIHRvIG91ciBhbGVydFxuICAgKiBAcGFyYW0gbWVzc2FnZSB0eXBlIElNZXNzYWdlIHRvIGJlIHB1c2hlZCB0byBvdXIgbGlzdGVuZXJzL3N1YnNjcmliZXJzXG4gICAqL1xuICBwdXNoKG1lc3NhZ2U6IElNZXNzYWdlKSB7XG4gICAgdGhpcy5fbWVzc2FnZVNvdXJjZS5uZXh0KG1lc3NhZ2UpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1lc3NhZ2UsIENsb3NlVHlwZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nLWFsZXJ0JyxcbiAgdGVtcGxhdGVVcmw6ICdhbGVydC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW11cbn0pXG5leHBvcnQgY2xhc3MgTmdBbGVydENvbXBvbmVudCB7XG5cbiAgQElucHV0KCkgZGlzbWlzc2FibGU6IGJvb2xlYW47XG4gIHJhd01lc3NhZ2U6IElNZXNzYWdlO1xuICBAT3V0cHV0KCkgbWVzc2FnZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQElucHV0KCkgY2xvc2VUeXBlOiBDbG9zZVR5cGUgPSBDbG9zZVR5cGUuVElNRVM7XG4gIGNsb3NlVHlwZXMgPSBDbG9zZVR5cGU7XG5cbiAgQElucHV0KClcbiAgZ2V0IG1lc3NhZ2UoKTogSU1lc3NhZ2Uge1xuICAgIHJldHVybiB0aGlzLnJhd01lc3NhZ2U7XG4gIH1cblxuICBzZXQgbWVzc2FnZSh2YWx1ZTogSU1lc3NhZ2UpIHtcbiAgICB0aGlzLnJhd01lc3NhZ2UgPSB2YWx1ZTtcbiAgICB0aGlzLm1lc3NhZ2VDaGFuZ2UuZW1pdCh0aGlzLnJhd01lc3NhZ2UpO1xuICB9XG5cblxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdBbGVydENvbXBvbmVudCB9IGZyb20gJy4vYWxlcnQuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ0FsZXJ0Q29tcG9uZW50XSxcbiAgZXhwb3J0czogW05nQWxlcnRDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5nQWxlcnRNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUNFLFNBQVUsU0FBUztJQUNqQixPQUFRLE9BQU87SUFDZixNQUFPLE1BQU07SUFDYixTQUFVLFNBQVM7Ozs7SUFlckIsUUFBSyxFQUFFLFNBQU07O29CQUFiLEtBQUs7b0JBQUUsTUFBTTs7Ozs7O0FDbkJmO0lBU0U7OEJBRHlCLElBQUksT0FBTyxFQUFZO0tBQy9COzs7Ozs7OztJQUtqQixrQ0FBUzs7OztJQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0tBQzVCOzs7Ozs7Ozs7O0lBTUQsNkJBQUk7Ozs7O0lBQUosVUFBSyxPQUFpQjtRQUNwQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNuQzs7Z0JBcEJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O3lCQU5EOzs7Ozs7O0FDQUE7OzZCQVk0QixJQUFJLFlBQVksRUFBRTt5QkFDWixTQUFTLENBQUMsS0FBSzswQkFDbEMsU0FBUzs7SUFFdEIsc0JBQ0kscUNBQU87Ozs7UUFEWDtZQUVFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUN4Qjs7Ozs7UUFFRCxVQUFZLEtBQWU7WUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzFDOzs7T0FMQTs7Z0JBaEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsKzJCQUFtQztpQkFFcEM7Ozs4QkFHRSxLQUFLO2dDQUVMLE1BQU07NEJBQ04sS0FBSzswQkFHTCxLQUFLOzsyQkFoQlI7Ozs7Ozs7QUNBQTs7OztnQkFJQyxRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLFlBQVk7cUJBQ2I7b0JBQ0QsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0JBQ2hDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO2lCQUM1Qjs7d0JBVkQ7Ozs7Ozs7Ozs7Ozs7OzsifQ==